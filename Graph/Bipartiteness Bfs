static boolean bfsCheck(int node, List<List<Integer>> adj, int[] color){
    Queue<Integer> q = new LinkedList<>();
    q.offer(node);
    color[node] = 1;
    while(!q.isEmpty()){
        int nde = q.poll();
        for(Integer it: adj.get(nde)){
            if(color[it]==-1){
                color[it] = 1 - color[nde];
                q.offer(it);
            }
            else if(color[it] == color[nde]) return false;
        }
    }
    return true;
}


static boolean Bipartiteness(int n, List<List<Integer>> adj){
    int[] color = new int[n];
    Arrays.fill(color, -1);
    for(int i=0;i<n;i++){
        if(color[i]==-1){
            if(!bfsCheck(i, adj, color))
                return false;
        }
    }
    return true;
}
