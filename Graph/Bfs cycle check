class Node{
    int node;
    int parent;
    Node(int n, int p){
        node = n;
        parent = p;
    }
}

static boolean cycleCheck(List<List<Integer>> adj, int src, boolean[] vis){
    Queue<Node> q = new LinkedList<>();
    q.offer(new Node(src, -1));
    vis[src] = true;
    while(!q.isEmpty()){
        int node = q.peek().node;
        int par = q.peek().parent;
        q.poll();
        
        for(Integer it: adj.get(node)){
            if(vis[it]==false){
                vis[it] = true;
                q.offer(new Node(it, node));
            }
            else if(par != it) return true;     //cycle exist
        }
    }
    return false;
}
